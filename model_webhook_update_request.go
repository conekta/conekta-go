/*
Conekta API

Conekta sdk

API version: 2.2.0
Contact: engineering@conekta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conekta

import (
	"encoding/json"
)

// checks if the WebhookUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookUpdateRequest{}

// WebhookUpdateRequest an updated webhook
type WebhookUpdateRequest struct {
	// Here you must place the URL of your Webhook remember that you must program what you will do with the events received. Also do not forget to handle the HTTPS protocol for greater security.
	Url *string `json:"url,omitempty"`
	// events that will be sent to the webhook
	SubscribedEvents []string `json:"subscribed_events,omitempty"`
	// whether the webhook is active or not
	Active *bool `json:"active,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WebhookUpdateRequest WebhookUpdateRequest

// NewWebhookUpdateRequest instantiates a new WebhookUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookUpdateRequest() *WebhookUpdateRequest {
	this := WebhookUpdateRequest{}
	return &this
}

// NewWebhookUpdateRequestWithDefaults instantiates a new WebhookUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookUpdateRequestWithDefaults() *WebhookUpdateRequest {
	this := WebhookUpdateRequest{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *WebhookUpdateRequest) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookUpdateRequest) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *WebhookUpdateRequest) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *WebhookUpdateRequest) SetUrl(v string) {
	o.Url = &v
}

// GetSubscribedEvents returns the SubscribedEvents field value if set, zero value otherwise.
func (o *WebhookUpdateRequest) GetSubscribedEvents() []string {
	if o == nil || IsNil(o.SubscribedEvents) {
		var ret []string
		return ret
	}
	return o.SubscribedEvents
}

// GetSubscribedEventsOk returns a tuple with the SubscribedEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookUpdateRequest) GetSubscribedEventsOk() ([]string, bool) {
	if o == nil || IsNil(o.SubscribedEvents) {
		return nil, false
	}
	return o.SubscribedEvents, true
}

// HasSubscribedEvents returns a boolean if a field has been set.
func (o *WebhookUpdateRequest) HasSubscribedEvents() bool {
	if o != nil && !IsNil(o.SubscribedEvents) {
		return true
	}

	return false
}

// SetSubscribedEvents gets a reference to the given []string and assigns it to the SubscribedEvents field.
func (o *WebhookUpdateRequest) SetSubscribedEvents(v []string) {
	o.SubscribedEvents = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *WebhookUpdateRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookUpdateRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *WebhookUpdateRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *WebhookUpdateRequest) SetActive(v bool) {
	o.Active = &v
}

func (o WebhookUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.SubscribedEvents) {
		toSerialize["subscribed_events"] = o.SubscribedEvents
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WebhookUpdateRequest) UnmarshalJSON(data []byte) (err error) {
	varWebhookUpdateRequest := _WebhookUpdateRequest{}

	err = json.Unmarshal(data, &varWebhookUpdateRequest)

	if err != nil {
		return err
	}

	*o = WebhookUpdateRequest(varWebhookUpdateRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "url")
		delete(additionalProperties, "subscribed_events")
		delete(additionalProperties, "active")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWebhookUpdateRequest struct {
	value *WebhookUpdateRequest
	isSet bool
}

func (v NullableWebhookUpdateRequest) Get() *WebhookUpdateRequest {
	return v.value
}

func (v *NullableWebhookUpdateRequest) Set(val *WebhookUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookUpdateRequest(val *WebhookUpdateRequest) *NullableWebhookUpdateRequest {
	return &NullableWebhookUpdateRequest{value: val, isSet: true}
}

func (v NullableWebhookUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


