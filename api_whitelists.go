/*
Conekta API

Conekta sdk

API version: 2.1.0
Contact: engineering@conekta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conekta

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type WhitelistsApi interface {

	/*
	CreateNewRuleWhitelist Create a whitelisted rule

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateNewRuleWhitelistRequest
	*/
	CreateNewRuleWhitelist(ctx context.Context) ApiCreateNewRuleWhitelistRequest

	// CreateNewRuleWhitelistExecute executes the request
	CreateNewRuleWhitelistExecute(r ApiCreateNewRuleWhitelistRequest) (*http.Response, error)

	/*
	DeleteRuleWhitelist Delete a whitelisted rule

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteRuleWhitelistRequest
	*/
	DeleteRuleWhitelist(ctx context.Context) ApiDeleteRuleWhitelistRequest

	// DeleteRuleWhitelistExecute executes the request
	DeleteRuleWhitelistExecute(r ApiDeleteRuleWhitelistRequest) (*http.Response, error)

	/*
	GetWhiteList Get a list of whitelisted rules

	Return all rules

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetWhiteListRequest
	*/
	GetWhiteList(ctx context.Context) ApiGetWhiteListRequest

	// GetWhiteListExecute executes the request
	//  @return RiskRulesList
	GetWhiteListExecute(r ApiGetWhiteListRequest) (*RiskRulesList, *http.Response, error)
}

// WhitelistsApiService WhitelistsApi service
type WhitelistsApiService service

type ApiCreateNewRuleWhitelistRequest struct {
	ctx context.Context
	ApiService WhitelistsApi
	createRiskRulesData *CreateRiskRulesData
}

func (r ApiCreateNewRuleWhitelistRequest) CreateRiskRulesData(createRiskRulesData CreateRiskRulesData) ApiCreateNewRuleWhitelistRequest {
	r.createRiskRulesData = &createRiskRulesData
	return r
}

func (r ApiCreateNewRuleWhitelistRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateNewRuleWhitelistExecute(r)
}

/*
CreateNewRuleWhitelist Create a whitelisted rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateNewRuleWhitelistRequest
*/
func (a *WhitelistsApiService) CreateNewRuleWhitelist(ctx context.Context) ApiCreateNewRuleWhitelistRequest {
	return ApiCreateNewRuleWhitelistRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WhitelistsApiService) CreateNewRuleWhitelistExecute(r ApiCreateNewRuleWhitelistRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WhitelistsApiService.CreateNewRuleWhitelist")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/antifraud/whitelists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createRiskRulesData
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteRuleWhitelistRequest struct {
	ctx context.Context
	ApiService WhitelistsApi
}

func (r ApiDeleteRuleWhitelistRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRuleWhitelistExecute(r)
}

/*
DeleteRuleWhitelist Delete a whitelisted rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteRuleWhitelistRequest
*/
func (a *WhitelistsApiService) DeleteRuleWhitelist(ctx context.Context) ApiDeleteRuleWhitelistRequest {
	return ApiDeleteRuleWhitelistRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WhitelistsApiService) DeleteRuleWhitelistExecute(r ApiDeleteRuleWhitelistRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WhitelistsApiService.DeleteRuleWhitelist")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/antifraud/whitelists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetWhiteListRequest struct {
	ctx context.Context
	ApiService WhitelistsApi
}

func (r ApiGetWhiteListRequest) Execute() (*RiskRulesList, *http.Response, error) {
	return r.ApiService.GetWhiteListExecute(r)
}

/*
GetWhiteList Get a list of whitelisted rules

Return all rules

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetWhiteListRequest
*/
func (a *WhitelistsApiService) GetWhiteList(ctx context.Context) ApiGetWhiteListRequest {
	return ApiGetWhiteListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RiskRulesList
func (a *WhitelistsApiService) GetWhiteListExecute(r ApiGetWhiteListRequest) (*RiskRulesList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RiskRulesList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WhitelistsApiService.GetWhiteList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/antifraud/whitelists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
