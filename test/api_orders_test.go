/*
Conekta API

Testing OrdersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package conekta

import (
	"context"
	"fmt"
	"os"
	"testing"

	"github.com/conekta/conekta-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_conekta_OrdersAPIService(t *testing.T) {

	configuration := conekta.NewConfiguration()
	apiClient := conekta.NewAPIClient(configuration)

	t.Run("Test OrdersAPIService CancelOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrdersAPI.CancelOrder(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService CreateOrder", func(t *testing.T) {
		t.Skip("skip test") // remove to run test
		configuration := conekta.NewConfiguration()
		ctx := context.WithValue(context.TODO(), conekta.ContextAccessToken, os.Getenv("CONEKTA_PRIVATE_KEY"))
		apiClient := conekta.NewAPIClient(configuration)
		phone := "31431590545"
		name := "fran carrero"
		OrderRequest := conekta.OrderRequest{
			Charges: []conekta.ChargeRequest{
				{
					PaymentMethod: conekta.ChargeRequestPaymentMethod{PaymentMethodBnplRequest: &conekta.PaymentMethodBnplRequest{
						Type:        "bnpl",
						CancelUrl:   "https://example.com/cancel",
						FailureUrl:  "https://example.com/failure",
						ProductType: "creditea_bnpl",
						SuccessUrl:  "https://example.com/success",
					}},
				},
			},
			Currency:     "MXN",
			CustomerInfo: conekta.OrderRequestCustomerInfo{},
			LineItems: []conekta.Product{
				{
					UnitPrice: 5000,
					Quantity:  1,
					Name:      "Test Product",
					Tags:      []string{"test", "product"},
				},
			},
			ShippingContact: &conekta.CustomerShippingContacts{
				Phone:    &phone,
				Receiver: &name,
				Address: conekta.CustomerShippingContactsAddress{
					Street1:    conekta.PtrString("123 Main St"),
					Street2:    conekta.PtrString("Apt 4B"),
					City:       conekta.PtrString("Mexico City"),
					State:      conekta.PtrString("CDMX"),
					PostalCode: conekta.PtrString("01234"),
					Country:    conekta.PtrString("MX"),
				},
			},
			ShippingLines: []conekta.ShippingRequest{
				{
					Carrier:        conekta.PtrString("DHL"),
					TrackingNumber: conekta.PtrString("123456789"),
					Amount:         1000,
				},
			},
		}
		resp, _, _ := apiClient.OrdersAPI.CreateOrder(ctx).OrderRequest(OrderRequest).AcceptLanguage("es").Execute()

		fmt.Println(resp)
		fmt.Println("order id:", resp.Id)
		fmt.Println("redirect_url:", resp.Charges.Data[0].PaymentMethod.PaymentMethodBnplPayment.RedirectUrl)
		fmt.Println("type:", resp.Charges.Data[0].PaymentMethod.PaymentMethodBnplPayment.Type)

	})
	t.Run("Test OrdersAPIService Create pbb Order", func(t *testing.T) {
		t.Skip("skip test") // remove to run test
		configuration := conekta.NewConfiguration()
		ctx := context.WithValue(context.TODO(), conekta.ContextAccessToken, os.Getenv("CONEKTA_PRIVATE_KEY"))
		apiClient := conekta.NewAPIClient(configuration)
		phone := "31431590545"
		name := "fran carrero"
		OrderRequest := conekta.OrderRequest{
			Charges: []conekta.ChargeRequest{
				{
					PaymentMethod: conekta.ChargeRequestPaymentMethod{PaymentMethodPbbRequest: &conekta.PaymentMethodPbbRequest{
						Type:        "pay_by_bank",
						ProductType: "bbva_pay_by_bank",
					}},
				},
			},
			Currency: "MXN",
			CustomerInfo: conekta.OrderRequestCustomerInfo{
				CustomerInfo: conekta.NewCustomerInfo("fran carrer", "mm@gmail.com", "31431590545"),
			},
			LineItems: []conekta.Product{
				{
					UnitPrice: 5000,
					Quantity:  1,
					Name:      "Test Product",
					Tags:      []string{"test", "product"},
				},
			},
			ShippingContact: &conekta.CustomerShippingContacts{
				Phone:    &phone,
				Receiver: &name,
				Address: conekta.CustomerShippingContactsAddress{
					Street1:    conekta.PtrString("123 Main St"),
					Street2:    conekta.PtrString("Apt 4B"),
					City:       conekta.PtrString("Mexico City"),
					State:      conekta.PtrString("CDMX"),
					PostalCode: conekta.PtrString("01234"),
					Country:    conekta.PtrString("MX"),
				},
			},
			ShippingLines: []conekta.ShippingRequest{
				{
					Carrier:        conekta.PtrString("DHL"),
					TrackingNumber: conekta.PtrString("123456789"),
					Amount:         1000,
				},
			},
		}
		resp, _, err := apiClient.OrdersAPI.CreateOrder(ctx).OrderRequest(OrderRequest).AcceptLanguage("es").Execute()

		assert.NoError(t, err)
		fmt.Println(resp)
		fmt.Println("order id:", resp.Id)
		fmt.Println("redirect_url:", resp.Charges.Data[0].PaymentMethod.PaymentMethodPbbPayment.RedirectUrl)
		fmt.Println("redirect_url:", resp.Charges.Data[0].PaymentMethod.PaymentMethodPbbPayment.GetDeepLink())
		fmt.Println("type:", resp.Charges.Data[0].PaymentMethod.PaymentMethodPbbPayment.Type)

	})

	t.Run("Test OrdersAPIService GetOrderById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrdersAPI.GetOrderById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService GetOrders", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.OrdersAPI.GetOrders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService OrderCancelRefund", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var refundId string

		resp, httpRes, err := apiClient.OrdersAPI.OrderCancelRefund(context.Background(), id, refundId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService OrderRefund", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrdersAPI.OrderRefund(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService OrdersCreateCapture", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrdersAPI.OrdersCreateCapture(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService UpdateOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrdersAPI.UpdateOrder(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
