/*
Conekta API

Conekta sdk

API version: 2.1.0
Contact: engineering@conekta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conekta

import (
	"encoding/json"
	"fmt"
)

// checks if the PayoutOrderResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PayoutOrderResponse{}

// PayoutOrderResponse payout order model response
type PayoutOrderResponse struct {
	// The payout methods that are allowed for the payout order.
	AllowedPayoutMethods []string `json:"allowed_payout_methods"`
	// The amount of the payout order.
	Amount int32 `json:"amount"`
	// The creation date of the payout order.
	CreatedAt int64 `json:"created_at"`
	// The currency in which the payout order is made.
	Currency     string                          `json:"currency"`
	CustomerInfo PayoutOrderResponseCustomerInfo `json:"customer_info"`
	// The expiration date of the payout order.
	ExpiresAt *int64 `json:"expires_at,omitempty"`
	// The id of the payout order.
	Id string `json:"id"`
	// The live mode of the payout order.
	Livemode bool `json:"livemode"`
	// The object of the payout order.
	Object string `json:"object"`
	// The metadata of the payout order.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The payout information of the payout order.
	Payouts []PayoutOrderPayoutsItem `json:"payouts"`
	// The reason for the payout order.
	Reason string `json:"reason"`
	// The status of the payout order.
	Status *string `json:"status,omitempty"`
	// The update date of the payout order.
	UpdatedAt            int64 `json:"updated_at"`
	AdditionalProperties map[string]interface{}
}

type _PayoutOrderResponse PayoutOrderResponse

// NewPayoutOrderResponse instantiates a new PayoutOrderResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayoutOrderResponse(allowedPayoutMethods []string, amount int32, createdAt int64, currency string, customerInfo PayoutOrderResponseCustomerInfo, id string, livemode bool, object string, payouts []PayoutOrderPayoutsItem, reason string, updatedAt int64) *PayoutOrderResponse {
	this := PayoutOrderResponse{}
	this.AllowedPayoutMethods = allowedPayoutMethods
	this.Amount = amount
	this.CreatedAt = createdAt
	this.Currency = currency
	this.CustomerInfo = customerInfo
	this.Id = id
	this.Livemode = livemode
	this.Object = object
	this.Payouts = payouts
	this.Reason = reason
	this.UpdatedAt = updatedAt
	return &this
}

// NewPayoutOrderResponseWithDefaults instantiates a new PayoutOrderResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayoutOrderResponseWithDefaults() *PayoutOrderResponse {
	this := PayoutOrderResponse{}
	var currency string = "MXN"
	this.Currency = currency
	return &this
}

// GetAllowedPayoutMethods returns the AllowedPayoutMethods field value
func (o *PayoutOrderResponse) GetAllowedPayoutMethods() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AllowedPayoutMethods
}

// GetAllowedPayoutMethodsOk returns a tuple with the AllowedPayoutMethods field value
// and a boolean to check if the value has been set.
func (o *PayoutOrderResponse) GetAllowedPayoutMethodsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowedPayoutMethods, true
}

// SetAllowedPayoutMethods sets field value
func (o *PayoutOrderResponse) SetAllowedPayoutMethods(v []string) {
	o.AllowedPayoutMethods = v
}

// GetAmount returns the Amount field value
func (o *PayoutOrderResponse) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PayoutOrderResponse) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PayoutOrderResponse) SetAmount(v int32) {
	o.Amount = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PayoutOrderResponse) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PayoutOrderResponse) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PayoutOrderResponse) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetCurrency returns the Currency field value
func (o *PayoutOrderResponse) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *PayoutOrderResponse) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *PayoutOrderResponse) SetCurrency(v string) {
	o.Currency = v
}

// GetCustomerInfo returns the CustomerInfo field value
func (o *PayoutOrderResponse) GetCustomerInfo() PayoutOrderResponseCustomerInfo {
	if o == nil {
		var ret PayoutOrderResponseCustomerInfo
		return ret
	}

	return o.CustomerInfo
}

// GetCustomerInfoOk returns a tuple with the CustomerInfo field value
// and a boolean to check if the value has been set.
func (o *PayoutOrderResponse) GetCustomerInfoOk() (*PayoutOrderResponseCustomerInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerInfo, true
}

// SetCustomerInfo sets field value
func (o *PayoutOrderResponse) SetCustomerInfo(v PayoutOrderResponseCustomerInfo) {
	o.CustomerInfo = v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *PayoutOrderResponse) GetExpiresAt() int64 {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret int64
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutOrderResponse) GetExpiresAtOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *PayoutOrderResponse) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given int64 and assigns it to the ExpiresAt field.
func (o *PayoutOrderResponse) SetExpiresAt(v int64) {
	o.ExpiresAt = &v
}

// GetId returns the Id field value
func (o *PayoutOrderResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PayoutOrderResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PayoutOrderResponse) SetId(v string) {
	o.Id = v
}

// GetLivemode returns the Livemode field value
func (o *PayoutOrderResponse) GetLivemode() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Livemode
}

// GetLivemodeOk returns a tuple with the Livemode field value
// and a boolean to check if the value has been set.
func (o *PayoutOrderResponse) GetLivemodeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Livemode, true
}

// SetLivemode sets field value
func (o *PayoutOrderResponse) SetLivemode(v bool) {
	o.Livemode = v
}

// GetObject returns the Object field value
func (o *PayoutOrderResponse) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *PayoutOrderResponse) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *PayoutOrderResponse) SetObject(v string) {
	o.Object = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *PayoutOrderResponse) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutOrderResponse) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *PayoutOrderResponse) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *PayoutOrderResponse) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetPayouts returns the Payouts field value
func (o *PayoutOrderResponse) GetPayouts() []PayoutOrderPayoutsItem {
	if o == nil {
		var ret []PayoutOrderPayoutsItem
		return ret
	}

	return o.Payouts
}

// GetPayoutsOk returns a tuple with the Payouts field value
// and a boolean to check if the value has been set.
func (o *PayoutOrderResponse) GetPayoutsOk() ([]PayoutOrderPayoutsItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Payouts, true
}

// SetPayouts sets field value
func (o *PayoutOrderResponse) SetPayouts(v []PayoutOrderPayoutsItem) {
	o.Payouts = v
}

// GetReason returns the Reason field value
func (o *PayoutOrderResponse) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *PayoutOrderResponse) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *PayoutOrderResponse) SetReason(v string) {
	o.Reason = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PayoutOrderResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutOrderResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PayoutOrderResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PayoutOrderResponse) SetStatus(v string) {
	o.Status = &v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *PayoutOrderResponse) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *PayoutOrderResponse) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *PayoutOrderResponse) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

func (o PayoutOrderResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PayoutOrderResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allowed_payout_methods"] = o.AllowedPayoutMethods
	toSerialize["amount"] = o.Amount
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["currency"] = o.Currency
	toSerialize["customer_info"] = o.CustomerInfo
	if !IsNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	toSerialize["id"] = o.Id
	toSerialize["livemode"] = o.Livemode
	toSerialize["object"] = o.Object
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["payouts"] = o.Payouts
	toSerialize["reason"] = o.Reason
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["updated_at"] = o.UpdatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PayoutOrderResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"allowed_payout_methods",
		"amount",
		"created_at",
		"currency",
		"customer_info",
		"id",
		"livemode",
		"object",
		"payouts",
		"reason",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPayoutOrderResponse := _PayoutOrderResponse{}

	err = json.Unmarshal(data, &varPayoutOrderResponse)

	if err != nil {
		return err
	}

	*o = PayoutOrderResponse(varPayoutOrderResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "allowed_payout_methods")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "customer_info")
		delete(additionalProperties, "expires_at")
		delete(additionalProperties, "id")
		delete(additionalProperties, "livemode")
		delete(additionalProperties, "object")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "payouts")
		delete(additionalProperties, "reason")
		delete(additionalProperties, "status")
		delete(additionalProperties, "updated_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePayoutOrderResponse struct {
	value *PayoutOrderResponse
	isSet bool
}

func (v NullablePayoutOrderResponse) Get() *PayoutOrderResponse {
	return v.value
}

func (v *NullablePayoutOrderResponse) Set(val *PayoutOrderResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePayoutOrderResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePayoutOrderResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayoutOrderResponse(val *PayoutOrderResponse) *NullablePayoutOrderResponse {
	return &NullablePayoutOrderResponse{value: val, isSet: true}
}

func (v NullablePayoutOrderResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayoutOrderResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
