/*
Conekta API

Conekta sdk

API version: 2.2.0
Contact: engineering@conekta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conekta

import (
	"encoding/json"
	"fmt"
)

// checks if the PaymentMethodBnplRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentMethodBnplRequest{}

// PaymentMethodBnplRequest struct for PaymentMethodBnplRequest
type PaymentMethodBnplRequest struct {
	// Type of the payment method
	Type string `json:"type"`
	// URL to redirect the customer after a canceled payment
	CancelUrl string `json:"cancel_url"`
	// Indicates if the payment method can not expire
	CanNotExpire bool `json:"can_not_expire"`
	// URL to redirect the customer after a failed payment
	FailureUrl string `json:"failure_url"`
	// Product type of the payment method, use for the payment method to know the product type
	ProductType string `json:"product_type"`
	// URL to redirect the customer after a successful payment
	SuccessUrl string `json:"success_url"`
	AdditionalProperties map[string]interface{}
}

type _PaymentMethodBnplRequest PaymentMethodBnplRequest

// NewPaymentMethodBnplRequest instantiates a new PaymentMethodBnplRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentMethodBnplRequest(type_ string, cancelUrl string, canNotExpire bool, failureUrl string, productType string, successUrl string) *PaymentMethodBnplRequest {
	this := PaymentMethodBnplRequest{}
	this.Type = type_
	this.CancelUrl = cancelUrl
	this.CanNotExpire = canNotExpire
	this.FailureUrl = failureUrl
	this.ProductType = productType
	this.SuccessUrl = successUrl
	return &this
}

// NewPaymentMethodBnplRequestWithDefaults instantiates a new PaymentMethodBnplRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentMethodBnplRequestWithDefaults() *PaymentMethodBnplRequest {
	this := PaymentMethodBnplRequest{}
	return &this
}

// GetType returns the Type field value
func (o *PaymentMethodBnplRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PaymentMethodBnplRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PaymentMethodBnplRequest) SetType(v string) {
	o.Type = v
}

// GetCancelUrl returns the CancelUrl field value
func (o *PaymentMethodBnplRequest) GetCancelUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CancelUrl
}

// GetCancelUrlOk returns a tuple with the CancelUrl field value
// and a boolean to check if the value has been set.
func (o *PaymentMethodBnplRequest) GetCancelUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CancelUrl, true
}

// SetCancelUrl sets field value
func (o *PaymentMethodBnplRequest) SetCancelUrl(v string) {
	o.CancelUrl = v
}

// GetCanNotExpire returns the CanNotExpire field value
func (o *PaymentMethodBnplRequest) GetCanNotExpire() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanNotExpire
}

// GetCanNotExpireOk returns a tuple with the CanNotExpire field value
// and a boolean to check if the value has been set.
func (o *PaymentMethodBnplRequest) GetCanNotExpireOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanNotExpire, true
}

// SetCanNotExpire sets field value
func (o *PaymentMethodBnplRequest) SetCanNotExpire(v bool) {
	o.CanNotExpire = v
}

// GetFailureUrl returns the FailureUrl field value
func (o *PaymentMethodBnplRequest) GetFailureUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FailureUrl
}

// GetFailureUrlOk returns a tuple with the FailureUrl field value
// and a boolean to check if the value has been set.
func (o *PaymentMethodBnplRequest) GetFailureUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailureUrl, true
}

// SetFailureUrl sets field value
func (o *PaymentMethodBnplRequest) SetFailureUrl(v string) {
	o.FailureUrl = v
}

// GetProductType returns the ProductType field value
func (o *PaymentMethodBnplRequest) GetProductType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value
// and a boolean to check if the value has been set.
func (o *PaymentMethodBnplRequest) GetProductTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductType, true
}

// SetProductType sets field value
func (o *PaymentMethodBnplRequest) SetProductType(v string) {
	o.ProductType = v
}

// GetSuccessUrl returns the SuccessUrl field value
func (o *PaymentMethodBnplRequest) GetSuccessUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SuccessUrl
}

// GetSuccessUrlOk returns a tuple with the SuccessUrl field value
// and a boolean to check if the value has been set.
func (o *PaymentMethodBnplRequest) GetSuccessUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuccessUrl, true
}

// SetSuccessUrl sets field value
func (o *PaymentMethodBnplRequest) SetSuccessUrl(v string) {
	o.SuccessUrl = v
}

func (o PaymentMethodBnplRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentMethodBnplRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["cancel_url"] = o.CancelUrl
	toSerialize["can_not_expire"] = o.CanNotExpire
	toSerialize["failure_url"] = o.FailureUrl
	toSerialize["product_type"] = o.ProductType
	toSerialize["success_url"] = o.SuccessUrl

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PaymentMethodBnplRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"cancel_url",
		"can_not_expire",
		"failure_url",
		"product_type",
		"success_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentMethodBnplRequest := _PaymentMethodBnplRequest{}

	err = json.Unmarshal(data, &varPaymentMethodBnplRequest)

	if err != nil {
		return err
	}

	*o = PaymentMethodBnplRequest(varPaymentMethodBnplRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "cancel_url")
		delete(additionalProperties, "can_not_expire")
		delete(additionalProperties, "failure_url")
		delete(additionalProperties, "product_type")
		delete(additionalProperties, "success_url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePaymentMethodBnplRequest struct {
	value *PaymentMethodBnplRequest
	isSet bool
}

func (v NullablePaymentMethodBnplRequest) Get() *PaymentMethodBnplRequest {
	return v.value
}

func (v *NullablePaymentMethodBnplRequest) Set(val *PaymentMethodBnplRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentMethodBnplRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentMethodBnplRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentMethodBnplRequest(val *PaymentMethodBnplRequest) *NullablePaymentMethodBnplRequest {
	return &NullablePaymentMethodBnplRequest{value: val, isSet: true}
}

func (v NullablePaymentMethodBnplRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentMethodBnplRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


