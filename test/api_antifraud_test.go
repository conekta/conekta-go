/*
Conekta API

Testing AntifraudApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package conekta_test

import (
	"context"
	"testing"

	"github.com/conekta/conekta-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_conekta_AntifraudApiService(t *testing.T) {

	configuration := conekta.NewConfiguration()
	configuration.Host = _basePath
	configuration.Scheme = "http"
	apiClient := conekta.NewAPIClient(configuration)

	t.Run("Test AntifraudApiService CreateRuleBlacklist", func(t *testing.T) {
		req := conekta.CreateRiskRulesData{
			Description: "desc",
			Field:       "field",
			Value:       "value",
		}
		resp, httpRes, err := apiClient.AntifraudApi.CreateRuleWhitelist(context.TODO()).
			CreateRiskRulesData(req).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AntifraudApiService CreateRuleWhitelist", func(t *testing.T) {
		req := conekta.CreateRiskRulesData{
			Description: "desc",
			Field:       "field",
			Value:       "value",
		}
		resp, httpRes, err := apiClient.AntifraudApi.CreateRuleWhitelist(context.TODO()).
			CreateRiskRulesData(req).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AntifraudApiService DeleteRuleBlacklist", func(t *testing.T) {
		resp, httpRes, err := apiClient.AntifraudApi.DeleteRuleWhitelist(context.TODO(), "618c3f2fdb8b8da9be376afe").
			Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AntifraudApiService DeleteRuleWhitelist", func(t *testing.T) {
		resp, httpRes, err := apiClient.AntifraudApi.DeleteRuleBlacklist(context.TODO(), "618c3f30db8b8da9be376b1e").
			Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AntifraudApiService GetRuleBlacklist", func(t *testing.T) {
		resp, httpRes, err := apiClient.AntifraudApi.GetRuleBlacklist(context.TODO()).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AntifraudApiService GetRuleWhitelist", func(t *testing.T) {
		resp, httpRes, err := apiClient.AntifraudApi.GetRuleWhitelist(context.TODO()).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
