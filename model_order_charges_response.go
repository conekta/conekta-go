/*
Conekta API

Conekta sdk

API version: 2.2.0
Contact: engineering@conekta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conekta

import (
	"encoding/json"
	"fmt"
)

// checks if the OrderChargesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderChargesResponse{}

// OrderChargesResponse The charges associated with the order
type OrderChargesResponse struct {
	// Indicates if there are more pages to be requested
	HasMore bool `json:"has_more"`
	// Object type, in this case is list
	Object string `json:"object"`
	Data []ChargesDataResponse `json:"data,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrderChargesResponse OrderChargesResponse

// NewOrderChargesResponse instantiates a new OrderChargesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderChargesResponse(hasMore bool, object string) *OrderChargesResponse {
	this := OrderChargesResponse{}
	this.HasMore = hasMore
	this.Object = object
	return &this
}

// NewOrderChargesResponseWithDefaults instantiates a new OrderChargesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderChargesResponseWithDefaults() *OrderChargesResponse {
	this := OrderChargesResponse{}
	return &this
}

// GetHasMore returns the HasMore field value
func (o *OrderChargesResponse) GetHasMore() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value
// and a boolean to check if the value has been set.
func (o *OrderChargesResponse) GetHasMoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasMore, true
}

// SetHasMore sets field value
func (o *OrderChargesResponse) SetHasMore(v bool) {
	o.HasMore = v
}

// GetObject returns the Object field value
func (o *OrderChargesResponse) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *OrderChargesResponse) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *OrderChargesResponse) SetObject(v string) {
	o.Object = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *OrderChargesResponse) GetData() []ChargesDataResponse {
	if o == nil || IsNil(o.Data) {
		var ret []ChargesDataResponse
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderChargesResponse) GetDataOk() ([]ChargesDataResponse, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *OrderChargesResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []ChargesDataResponse and assigns it to the Data field.
func (o *OrderChargesResponse) SetData(v []ChargesDataResponse) {
	o.Data = v
}

func (o OrderChargesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderChargesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["has_more"] = o.HasMore
	toSerialize["object"] = o.Object
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrderChargesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"has_more",
		"object",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderChargesResponse := _OrderChargesResponse{}

	err = json.Unmarshal(data, &varOrderChargesResponse)

	if err != nil {
		return err
	}

	*o = OrderChargesResponse(varOrderChargesResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "has_more")
		delete(additionalProperties, "object")
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrderChargesResponse struct {
	value *OrderChargesResponse
	isSet bool
}

func (v NullableOrderChargesResponse) Get() *OrderChargesResponse {
	return v.value
}

func (v *NullableOrderChargesResponse) Set(val *OrderChargesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderChargesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderChargesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderChargesResponse(val *OrderChargesResponse) *NullableOrderChargesResponse {
	return &NullableOrderChargesResponse{value: val, isSet: true}
}

func (v NullableOrderChargesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderChargesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


