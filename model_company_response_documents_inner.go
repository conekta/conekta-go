/*
Conekta API

Conekta sdk

API version: 2.2.0
Contact: engineering@conekta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conekta

import (
	"encoding/json"
)

// checks if the CompanyResponseDocumentsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyResponseDocumentsInner{}

// CompanyResponseDocumentsInner struct for CompanyResponseDocumentsInner
type CompanyResponseDocumentsInner struct {
	// Classification of the document.  | Tipo de archivo              | Descripción                                               | | :--------------------------- | :-------------------------------------------------------- | | `id_legal_representative`      | identificación oficial frente                             | | `id_legal_representative_back` | identificación oficial atrás                              | | `cfdi`                         | Prueba de situación fiscal                                | | `constitutive_act_basic`       | Acta constitutiva                                         | | `proof_of_address`             | Comprobante de domicilio del negocio                      | | `power_of_attonery`            | Poderes de representación                                 | | `deposit_account_cover`        | Carátula de la cuenta de depósito                         | | `permit_casino`                | Permiso ante SEGOB                                        | | `license_sanitation`           | Licencia sanitaria de COFEPRIS                            | | `registration_tourism`         | Inscripción ante el Registro Nacional de Turismo (SECTUR) | 
	FileClassification *string `json:"file_classification,omitempty"`
	// The status of the document.
	Status *string `json:"status,omitempty"`
	// The name of the file.
	FileName NullableString `json:"file_name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CompanyResponseDocumentsInner CompanyResponseDocumentsInner

// NewCompanyResponseDocumentsInner instantiates a new CompanyResponseDocumentsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyResponseDocumentsInner() *CompanyResponseDocumentsInner {
	this := CompanyResponseDocumentsInner{}
	return &this
}

// NewCompanyResponseDocumentsInnerWithDefaults instantiates a new CompanyResponseDocumentsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyResponseDocumentsInnerWithDefaults() *CompanyResponseDocumentsInner {
	this := CompanyResponseDocumentsInner{}
	return &this
}

// GetFileClassification returns the FileClassification field value if set, zero value otherwise.
func (o *CompanyResponseDocumentsInner) GetFileClassification() string {
	if o == nil || IsNil(o.FileClassification) {
		var ret string
		return ret
	}
	return *o.FileClassification
}

// GetFileClassificationOk returns a tuple with the FileClassification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyResponseDocumentsInner) GetFileClassificationOk() (*string, bool) {
	if o == nil || IsNil(o.FileClassification) {
		return nil, false
	}
	return o.FileClassification, true
}

// HasFileClassification returns a boolean if a field has been set.
func (o *CompanyResponseDocumentsInner) HasFileClassification() bool {
	if o != nil && !IsNil(o.FileClassification) {
		return true
	}

	return false
}

// SetFileClassification gets a reference to the given string and assigns it to the FileClassification field.
func (o *CompanyResponseDocumentsInner) SetFileClassification(v string) {
	o.FileClassification = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CompanyResponseDocumentsInner) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyResponseDocumentsInner) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CompanyResponseDocumentsInner) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CompanyResponseDocumentsInner) SetStatus(v string) {
	o.Status = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyResponseDocumentsInner) GetFileName() string {
	if o == nil || IsNil(o.FileName.Get()) {
		var ret string
		return ret
	}
	return *o.FileName.Get()
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyResponseDocumentsInner) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileName.Get(), o.FileName.IsSet()
}

// HasFileName returns a boolean if a field has been set.
func (o *CompanyResponseDocumentsInner) HasFileName() bool {
	if o != nil && o.FileName.IsSet() {
		return true
	}

	return false
}

// SetFileName gets a reference to the given NullableString and assigns it to the FileName field.
func (o *CompanyResponseDocumentsInner) SetFileName(v string) {
	o.FileName.Set(&v)
}
// SetFileNameNil sets the value for FileName to be an explicit nil
func (o *CompanyResponseDocumentsInner) SetFileNameNil() {
	o.FileName.Set(nil)
}

// UnsetFileName ensures that no value is present for FileName, not even an explicit nil
func (o *CompanyResponseDocumentsInner) UnsetFileName() {
	o.FileName.Unset()
}

func (o CompanyResponseDocumentsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyResponseDocumentsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileClassification) {
		toSerialize["file_classification"] = o.FileClassification
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.FileName.IsSet() {
		toSerialize["file_name"] = o.FileName.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompanyResponseDocumentsInner) UnmarshalJSON(data []byte) (err error) {
	varCompanyResponseDocumentsInner := _CompanyResponseDocumentsInner{}

	err = json.Unmarshal(data, &varCompanyResponseDocumentsInner)

	if err != nil {
		return err
	}

	*o = CompanyResponseDocumentsInner(varCompanyResponseDocumentsInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "file_classification")
		delete(additionalProperties, "status")
		delete(additionalProperties, "file_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCompanyResponseDocumentsInner struct {
	value *CompanyResponseDocumentsInner
	isSet bool
}

func (v NullableCompanyResponseDocumentsInner) Get() *CompanyResponseDocumentsInner {
	return v.value
}

func (v *NullableCompanyResponseDocumentsInner) Set(val *CompanyResponseDocumentsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyResponseDocumentsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyResponseDocumentsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyResponseDocumentsInner(val *CompanyResponseDocumentsInner) *NullableCompanyResponseDocumentsInner {
	return &NullableCompanyResponseDocumentsInner{value: val, isSet: true}
}

func (v NullableCompanyResponseDocumentsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyResponseDocumentsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


