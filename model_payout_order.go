/*
Conekta API

Conekta sdk

API version: 2.2.0
Contact: engineering@conekta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conekta

import (
	"encoding/json"
	"fmt"
)

// checks if the PayoutOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PayoutOrder{}

// PayoutOrder a payout order
type PayoutOrder struct {
	// The payout methods that are allowed for the payout order.
	AllowedPayoutMethods []string `json:"allowed_payout_methods"`
	// The amount of the payout order.
	Amount int32 `json:"amount"`
	// The currency in which the payout order is made.
	Currency string `json:"currency"`
	CustomerInfo CustomerInfoJustCustomerId `json:"customer_info"`
	// The metadata of the payout order.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Payout Payout `json:"payout"`
	// The reason for the payout order.
	Reason string `json:"reason"`
	AdditionalProperties map[string]interface{}
}

type _PayoutOrder PayoutOrder

// NewPayoutOrder instantiates a new PayoutOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayoutOrder(allowedPayoutMethods []string, amount int32, currency string, customerInfo CustomerInfoJustCustomerId, payout Payout, reason string) *PayoutOrder {
	this := PayoutOrder{}
	this.AllowedPayoutMethods = allowedPayoutMethods
	this.Amount = amount
	this.Currency = currency
	this.CustomerInfo = customerInfo
	this.Payout = payout
	this.Reason = reason
	return &this
}

// NewPayoutOrderWithDefaults instantiates a new PayoutOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayoutOrderWithDefaults() *PayoutOrder {
	this := PayoutOrder{}
	var currency string = "MXN"
	this.Currency = currency
	return &this
}

// GetAllowedPayoutMethods returns the AllowedPayoutMethods field value
func (o *PayoutOrder) GetAllowedPayoutMethods() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AllowedPayoutMethods
}

// GetAllowedPayoutMethodsOk returns a tuple with the AllowedPayoutMethods field value
// and a boolean to check if the value has been set.
func (o *PayoutOrder) GetAllowedPayoutMethodsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowedPayoutMethods, true
}

// SetAllowedPayoutMethods sets field value
func (o *PayoutOrder) SetAllowedPayoutMethods(v []string) {
	o.AllowedPayoutMethods = v
}

// GetAmount returns the Amount field value
func (o *PayoutOrder) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PayoutOrder) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PayoutOrder) SetAmount(v int32) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *PayoutOrder) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *PayoutOrder) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *PayoutOrder) SetCurrency(v string) {
	o.Currency = v
}

// GetCustomerInfo returns the CustomerInfo field value
func (o *PayoutOrder) GetCustomerInfo() CustomerInfoJustCustomerId {
	if o == nil {
		var ret CustomerInfoJustCustomerId
		return ret
	}

	return o.CustomerInfo
}

// GetCustomerInfoOk returns a tuple with the CustomerInfo field value
// and a boolean to check if the value has been set.
func (o *PayoutOrder) GetCustomerInfoOk() (*CustomerInfoJustCustomerId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerInfo, true
}

// SetCustomerInfo sets field value
func (o *PayoutOrder) SetCustomerInfo(v CustomerInfoJustCustomerId) {
	o.CustomerInfo = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *PayoutOrder) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayoutOrder) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *PayoutOrder) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *PayoutOrder) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetPayout returns the Payout field value
func (o *PayoutOrder) GetPayout() Payout {
	if o == nil {
		var ret Payout
		return ret
	}

	return o.Payout
}

// GetPayoutOk returns a tuple with the Payout field value
// and a boolean to check if the value has been set.
func (o *PayoutOrder) GetPayoutOk() (*Payout, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Payout, true
}

// SetPayout sets field value
func (o *PayoutOrder) SetPayout(v Payout) {
	o.Payout = v
}

// GetReason returns the Reason field value
func (o *PayoutOrder) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *PayoutOrder) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *PayoutOrder) SetReason(v string) {
	o.Reason = v
}

func (o PayoutOrder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PayoutOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allowed_payout_methods"] = o.AllowedPayoutMethods
	toSerialize["amount"] = o.Amount
	toSerialize["currency"] = o.Currency
	toSerialize["customer_info"] = o.CustomerInfo
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["payout"] = o.Payout
	toSerialize["reason"] = o.Reason

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PayoutOrder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"allowed_payout_methods",
		"amount",
		"currency",
		"customer_info",
		"payout",
		"reason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPayoutOrder := _PayoutOrder{}

	err = json.Unmarshal(data, &varPayoutOrder)

	if err != nil {
		return err
	}

	*o = PayoutOrder(varPayoutOrder)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "allowed_payout_methods")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "customer_info")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "payout")
		delete(additionalProperties, "reason")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePayoutOrder struct {
	value *PayoutOrder
	isSet bool
}

func (v NullablePayoutOrder) Get() *PayoutOrder {
	return v.value
}

func (v *NullablePayoutOrder) Set(val *PayoutOrder) {
	v.value = val
	v.isSet = true
}

func (v NullablePayoutOrder) IsSet() bool {
	return v.isSet
}

func (v *NullablePayoutOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayoutOrder(val *PayoutOrder) *NullablePayoutOrder {
	return &NullablePayoutOrder{value: val, isSet: true}
}

func (v NullablePayoutOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayoutOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


