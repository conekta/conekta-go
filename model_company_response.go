/*
Conekta API

Conekta sdk

API version: 2.2.0
Contact: engineering@conekta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conekta

import (
	"encoding/json"
	"fmt"
)

// checks if the CompanyResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyResponse{}

// CompanyResponse struct for CompanyResponse
type CompanyResponse struct {
	// The unique identifier for the company.
	Id string `json:"id"`
	// The name of the company.
	Name string `json:"name"`
	// Indicates if the company is active.
	Active bool `json:"active"`
	// The current status of the company's account.
	AccountStatus string `json:"account_status"`
	// The identifier of the parent company, if any.
	ParentCompanyId NullableString `json:"parent_company_id,omitempty"`
	// The current status of the company's onboarding process.
	OnboardingStatus string `json:"onboarding_status"`
	// A list of documents related to the company.
	Documents []CompanyResponseDocumentsInner `json:"documents"`
	// Timestamp of when the company was created.
	CreatedAt int64 `json:"created_at"`
	// The type of object, typically \"company\".
	Object string `json:"object"`
	// Indicates if 3DS authentication is enabled for the company.
	ThreeDsEnabled *bool `json:"three_ds_enabled,omitempty"`
	// The 3DS mode for the company, either 'smart' or 'strict'. This property is only applicable when three_ds_enabled is true. When three_ds_enabled is false, this field will be null.
	ThreeDsMode NullableString `json:"three_ds_mode,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CompanyResponse CompanyResponse

// NewCompanyResponse instantiates a new CompanyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyResponse(id string, name string, active bool, accountStatus string, onboardingStatus string, documents []CompanyResponseDocumentsInner, createdAt int64, object string) *CompanyResponse {
	this := CompanyResponse{}
	this.Id = id
	this.Name = name
	this.Active = active
	this.AccountStatus = accountStatus
	this.OnboardingStatus = onboardingStatus
	this.Documents = documents
	this.CreatedAt = createdAt
	this.Object = object
	return &this
}

// NewCompanyResponseWithDefaults instantiates a new CompanyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyResponseWithDefaults() *CompanyResponse {
	this := CompanyResponse{}
	return &this
}

// GetId returns the Id field value
func (o *CompanyResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CompanyResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CompanyResponse) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *CompanyResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CompanyResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CompanyResponse) SetName(v string) {
	o.Name = v
}

// GetActive returns the Active field value
func (o *CompanyResponse) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *CompanyResponse) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *CompanyResponse) SetActive(v bool) {
	o.Active = v
}

// GetAccountStatus returns the AccountStatus field value
func (o *CompanyResponse) GetAccountStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountStatus
}

// GetAccountStatusOk returns a tuple with the AccountStatus field value
// and a boolean to check if the value has been set.
func (o *CompanyResponse) GetAccountStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountStatus, true
}

// SetAccountStatus sets field value
func (o *CompanyResponse) SetAccountStatus(v string) {
	o.AccountStatus = v
}

// GetParentCompanyId returns the ParentCompanyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyResponse) GetParentCompanyId() string {
	if o == nil || IsNil(o.ParentCompanyId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentCompanyId.Get()
}

// GetParentCompanyIdOk returns a tuple with the ParentCompanyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyResponse) GetParentCompanyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentCompanyId.Get(), o.ParentCompanyId.IsSet()
}

// HasParentCompanyId returns a boolean if a field has been set.
func (o *CompanyResponse) HasParentCompanyId() bool {
	if o != nil && o.ParentCompanyId.IsSet() {
		return true
	}

	return false
}

// SetParentCompanyId gets a reference to the given NullableString and assigns it to the ParentCompanyId field.
func (o *CompanyResponse) SetParentCompanyId(v string) {
	o.ParentCompanyId.Set(&v)
}
// SetParentCompanyIdNil sets the value for ParentCompanyId to be an explicit nil
func (o *CompanyResponse) SetParentCompanyIdNil() {
	o.ParentCompanyId.Set(nil)
}

// UnsetParentCompanyId ensures that no value is present for ParentCompanyId, not even an explicit nil
func (o *CompanyResponse) UnsetParentCompanyId() {
	o.ParentCompanyId.Unset()
}

// GetOnboardingStatus returns the OnboardingStatus field value
func (o *CompanyResponse) GetOnboardingStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OnboardingStatus
}

// GetOnboardingStatusOk returns a tuple with the OnboardingStatus field value
// and a boolean to check if the value has been set.
func (o *CompanyResponse) GetOnboardingStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OnboardingStatus, true
}

// SetOnboardingStatus sets field value
func (o *CompanyResponse) SetOnboardingStatus(v string) {
	o.OnboardingStatus = v
}

// GetDocuments returns the Documents field value
func (o *CompanyResponse) GetDocuments() []CompanyResponseDocumentsInner {
	if o == nil {
		var ret []CompanyResponseDocumentsInner
		return ret
	}

	return o.Documents
}

// GetDocumentsOk returns a tuple with the Documents field value
// and a boolean to check if the value has been set.
func (o *CompanyResponse) GetDocumentsOk() ([]CompanyResponseDocumentsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Documents, true
}

// SetDocuments sets field value
func (o *CompanyResponse) SetDocuments(v []CompanyResponseDocumentsInner) {
	o.Documents = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CompanyResponse) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CompanyResponse) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CompanyResponse) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetObject returns the Object field value
func (o *CompanyResponse) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *CompanyResponse) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *CompanyResponse) SetObject(v string) {
	o.Object = v
}

// GetThreeDsEnabled returns the ThreeDsEnabled field value if set, zero value otherwise.
func (o *CompanyResponse) GetThreeDsEnabled() bool {
	if o == nil || IsNil(o.ThreeDsEnabled) {
		var ret bool
		return ret
	}
	return *o.ThreeDsEnabled
}

// GetThreeDsEnabledOk returns a tuple with the ThreeDsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyResponse) GetThreeDsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ThreeDsEnabled) {
		return nil, false
	}
	return o.ThreeDsEnabled, true
}

// HasThreeDsEnabled returns a boolean if a field has been set.
func (o *CompanyResponse) HasThreeDsEnabled() bool {
	if o != nil && !IsNil(o.ThreeDsEnabled) {
		return true
	}

	return false
}

// SetThreeDsEnabled gets a reference to the given bool and assigns it to the ThreeDsEnabled field.
func (o *CompanyResponse) SetThreeDsEnabled(v bool) {
	o.ThreeDsEnabled = &v
}

// GetThreeDsMode returns the ThreeDsMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyResponse) GetThreeDsMode() string {
	if o == nil || IsNil(o.ThreeDsMode.Get()) {
		var ret string
		return ret
	}
	return *o.ThreeDsMode.Get()
}

// GetThreeDsModeOk returns a tuple with the ThreeDsMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyResponse) GetThreeDsModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ThreeDsMode.Get(), o.ThreeDsMode.IsSet()
}

// HasThreeDsMode returns a boolean if a field has been set.
func (o *CompanyResponse) HasThreeDsMode() bool {
	if o != nil && o.ThreeDsMode.IsSet() {
		return true
	}

	return false
}

// SetThreeDsMode gets a reference to the given NullableString and assigns it to the ThreeDsMode field.
func (o *CompanyResponse) SetThreeDsMode(v string) {
	o.ThreeDsMode.Set(&v)
}
// SetThreeDsModeNil sets the value for ThreeDsMode to be an explicit nil
func (o *CompanyResponse) SetThreeDsModeNil() {
	o.ThreeDsMode.Set(nil)
}

// UnsetThreeDsMode ensures that no value is present for ThreeDsMode, not even an explicit nil
func (o *CompanyResponse) UnsetThreeDsMode() {
	o.ThreeDsMode.Unset()
}

func (o CompanyResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["active"] = o.Active
	toSerialize["account_status"] = o.AccountStatus
	if o.ParentCompanyId.IsSet() {
		toSerialize["parent_company_id"] = o.ParentCompanyId.Get()
	}
	toSerialize["onboarding_status"] = o.OnboardingStatus
	toSerialize["documents"] = o.Documents
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["object"] = o.Object
	if !IsNil(o.ThreeDsEnabled) {
		toSerialize["three_ds_enabled"] = o.ThreeDsEnabled
	}
	if o.ThreeDsMode.IsSet() {
		toSerialize["three_ds_mode"] = o.ThreeDsMode.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompanyResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"active",
		"account_status",
		"onboarding_status",
		"documents",
		"created_at",
		"object",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanyResponse := _CompanyResponse{}

	err = json.Unmarshal(data, &varCompanyResponse)

	if err != nil {
		return err
	}

	*o = CompanyResponse(varCompanyResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "active")
		delete(additionalProperties, "account_status")
		delete(additionalProperties, "parent_company_id")
		delete(additionalProperties, "onboarding_status")
		delete(additionalProperties, "documents")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "object")
		delete(additionalProperties, "three_ds_enabled")
		delete(additionalProperties, "three_ds_mode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCompanyResponse struct {
	value *CompanyResponse
	isSet bool
}

func (v NullableCompanyResponse) Get() *CompanyResponse {
	return v.value
}

func (v *NullableCompanyResponse) Set(val *CompanyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyResponse(val *CompanyResponse) *NullableCompanyResponse {
	return &NullableCompanyResponse{value: val, isSet: true}
}

func (v NullableCompanyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


