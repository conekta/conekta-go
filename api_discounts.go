/*
Conekta API

Conekta sdk

API version: 2.1.0
Contact: engineering@conekta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conekta

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type DiscountsApi interface {

	/*
	OrdersCreateDiscountLine Create Discount

	Create discount lines for an existing orden

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Identifier of the resource
	@return ApiOrdersCreateDiscountLineRequest
	*/
	OrdersCreateDiscountLine(ctx context.Context, id string) ApiOrdersCreateDiscountLineRequest

	// OrdersCreateDiscountLineExecute executes the request
	//  @return DiscountLinesResponse
	OrdersCreateDiscountLineExecute(r ApiOrdersCreateDiscountLineRequest) (*DiscountLinesResponse, *http.Response, error)

	/*
	OrdersDeleteDiscountLines Delete Discount

	Delete an existing discount lines for an existing orden

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Identifier of the resource
	@param discountLinesId identifier
	@return ApiOrdersDeleteDiscountLinesRequest
	*/
	OrdersDeleteDiscountLines(ctx context.Context, id string, discountLinesId string) ApiOrdersDeleteDiscountLinesRequest

	// OrdersDeleteDiscountLinesExecute executes the request
	//  @return DiscountLinesResponse
	OrdersDeleteDiscountLinesExecute(r ApiOrdersDeleteDiscountLinesRequest) (*DiscountLinesResponse, *http.Response, error)

	/*
	OrdersUpdateDiscountLines Update Discount

	Update an existing discount lines for an existing orden

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Identifier of the resource
	@param discountLinesId identifier
	@return ApiOrdersUpdateDiscountLinesRequest
	*/
	OrdersUpdateDiscountLines(ctx context.Context, id string, discountLinesId string) ApiOrdersUpdateDiscountLinesRequest

	// OrdersUpdateDiscountLinesExecute executes the request
	//  @return DiscountLinesResponse
	OrdersUpdateDiscountLinesExecute(r ApiOrdersUpdateDiscountLinesRequest) (*DiscountLinesResponse, *http.Response, error)
}

// DiscountsApiService DiscountsApi service
type DiscountsApiService service

type ApiOrdersCreateDiscountLineRequest struct {
	ctx context.Context
	ApiService DiscountsApi
	id string
	orderDiscountLinesRequest *OrderDiscountLinesRequest
	acceptLanguage *string
}

// requested field for a discount lines
func (r ApiOrdersCreateDiscountLineRequest) OrderDiscountLinesRequest(orderDiscountLinesRequest OrderDiscountLinesRequest) ApiOrdersCreateDiscountLineRequest {
	r.orderDiscountLinesRequest = &orderDiscountLinesRequest
	return r
}

// Use for knowing which language to use
func (r ApiOrdersCreateDiscountLineRequest) AcceptLanguage(acceptLanguage string) ApiOrdersCreateDiscountLineRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiOrdersCreateDiscountLineRequest) Execute() (*DiscountLinesResponse, *http.Response, error) {
	return r.ApiService.OrdersCreateDiscountLineExecute(r)
}

/*
OrdersCreateDiscountLine Create Discount

Create discount lines for an existing orden

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifier of the resource
 @return ApiOrdersCreateDiscountLineRequest
*/
func (a *DiscountsApiService) OrdersCreateDiscountLine(ctx context.Context, id string) ApiOrdersCreateDiscountLineRequest {
	return ApiOrdersCreateDiscountLineRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DiscountLinesResponse
func (a *DiscountsApiService) OrdersCreateDiscountLineExecute(r ApiOrdersCreateDiscountLineRequest) (*DiscountLinesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DiscountLinesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountsApiService.OrdersCreateDiscountLine")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orders/{id}/discount_lines"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.orderDiscountLinesRequest == nil {
		return localVarReturnValue, nil, reportError("orderDiscountLinesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.conekta-v2.1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.orderDiscountLinesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrdersDeleteDiscountLinesRequest struct {
	ctx context.Context
	ApiService DiscountsApi
	id string
	discountLinesId string
	acceptLanguage *string
}

// Use for knowing which language to use
func (r ApiOrdersDeleteDiscountLinesRequest) AcceptLanguage(acceptLanguage string) ApiOrdersDeleteDiscountLinesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiOrdersDeleteDiscountLinesRequest) Execute() (*DiscountLinesResponse, *http.Response, error) {
	return r.ApiService.OrdersDeleteDiscountLinesExecute(r)
}

/*
OrdersDeleteDiscountLines Delete Discount

Delete an existing discount lines for an existing orden

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifier of the resource
 @param discountLinesId identifier
 @return ApiOrdersDeleteDiscountLinesRequest
*/
func (a *DiscountsApiService) OrdersDeleteDiscountLines(ctx context.Context, id string, discountLinesId string) ApiOrdersDeleteDiscountLinesRequest {
	return ApiOrdersDeleteDiscountLinesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		discountLinesId: discountLinesId,
	}
}

// Execute executes the request
//  @return DiscountLinesResponse
func (a *DiscountsApiService) OrdersDeleteDiscountLinesExecute(r ApiOrdersDeleteDiscountLinesRequest) (*DiscountLinesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DiscountLinesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountsApiService.OrdersDeleteDiscountLines")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orders/{id}/discount_lines/{discount_lines_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"discount_lines_id"+"}", url.PathEscape(parameterValueToString(r.discountLinesId, "discountLinesId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.conekta-v2.1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrdersUpdateDiscountLinesRequest struct {
	ctx context.Context
	ApiService DiscountsApi
	id string
	discountLinesId string
	updateOrderDiscountLinesRequest *UpdateOrderDiscountLinesRequest
	acceptLanguage *string
}

// requested field for a discount lines
func (r ApiOrdersUpdateDiscountLinesRequest) UpdateOrderDiscountLinesRequest(updateOrderDiscountLinesRequest UpdateOrderDiscountLinesRequest) ApiOrdersUpdateDiscountLinesRequest {
	r.updateOrderDiscountLinesRequest = &updateOrderDiscountLinesRequest
	return r
}

// Use for knowing which language to use
func (r ApiOrdersUpdateDiscountLinesRequest) AcceptLanguage(acceptLanguage string) ApiOrdersUpdateDiscountLinesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiOrdersUpdateDiscountLinesRequest) Execute() (*DiscountLinesResponse, *http.Response, error) {
	return r.ApiService.OrdersUpdateDiscountLinesExecute(r)
}

/*
OrdersUpdateDiscountLines Update Discount

Update an existing discount lines for an existing orden

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Identifier of the resource
 @param discountLinesId identifier
 @return ApiOrdersUpdateDiscountLinesRequest
*/
func (a *DiscountsApiService) OrdersUpdateDiscountLines(ctx context.Context, id string, discountLinesId string) ApiOrdersUpdateDiscountLinesRequest {
	return ApiOrdersUpdateDiscountLinesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		discountLinesId: discountLinesId,
	}
}

// Execute executes the request
//  @return DiscountLinesResponse
func (a *DiscountsApiService) OrdersUpdateDiscountLinesExecute(r ApiOrdersUpdateDiscountLinesRequest) (*DiscountLinesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DiscountLinesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountsApiService.OrdersUpdateDiscountLines")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orders/{id}/discount_lines/{discount_lines_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"discount_lines_id"+"}", url.PathEscape(parameterValueToString(r.discountLinesId, "discountLinesId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateOrderDiscountLinesRequest == nil {
		return localVarReturnValue, nil, reportError("updateOrderDiscountLinesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.conekta-v2.1.0+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.updateOrderDiscountLinesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
