/*
Conekta API

Conekta sdk

API version: 2.1.0
Contact: engineering@conekta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conekta

import (
	"encoding/json"
)

// checks if the RiskRulesList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RiskRulesList{}

// RiskRulesList struct for RiskRulesList
type RiskRulesList struct {
	HasMore *bool `json:"has_more,omitempty"`
	Object *string `json:"object,omitempty"`
	Data []RiskRulesListDataInner `json:"data,omitempty"`
}

// NewRiskRulesList instantiates a new RiskRulesList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskRulesList() *RiskRulesList {
	this := RiskRulesList{}
	return &this
}

// NewRiskRulesListWithDefaults instantiates a new RiskRulesList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskRulesListWithDefaults() *RiskRulesList {
	this := RiskRulesList{}
	return &this
}

// GetHasMore returns the HasMore field value if set, zero value otherwise.
func (o *RiskRulesList) GetHasMore() bool {
	if o == nil || IsNil(o.HasMore) {
		var ret bool
		return ret
	}
	return *o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskRulesList) GetHasMoreOk() (*bool, bool) {
	if o == nil || IsNil(o.HasMore) {
		return nil, false
	}
	return o.HasMore, true
}

// HasHasMore returns a boolean if a field has been set.
func (o *RiskRulesList) HasHasMore() bool {
	if o != nil && !IsNil(o.HasMore) {
		return true
	}

	return false
}

// SetHasMore gets a reference to the given bool and assigns it to the HasMore field.
func (o *RiskRulesList) SetHasMore(v bool) {
	o.HasMore = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *RiskRulesList) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskRulesList) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *RiskRulesList) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *RiskRulesList) SetObject(v string) {
	o.Object = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *RiskRulesList) GetData() []RiskRulesListDataInner {
	if o == nil || IsNil(o.Data) {
		var ret []RiskRulesListDataInner
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskRulesList) GetDataOk() ([]RiskRulesListDataInner, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *RiskRulesList) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []RiskRulesListDataInner and assigns it to the Data field.
func (o *RiskRulesList) SetData(v []RiskRulesListDataInner) {
	o.Data = v
}

func (o RiskRulesList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RiskRulesList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HasMore) {
		toSerialize["has_more"] = o.HasMore
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableRiskRulesList struct {
	value *RiskRulesList
	isSet bool
}

func (v NullableRiskRulesList) Get() *RiskRulesList {
	return v.value
}

func (v *NullableRiskRulesList) Set(val *RiskRulesList) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskRulesList) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskRulesList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskRulesList(val *RiskRulesList) *NullableRiskRulesList {
	return &NullableRiskRulesList{value: val, isSet: true}
}

func (v NullableRiskRulesList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskRulesList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


