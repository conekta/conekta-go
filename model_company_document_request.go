/*
Conekta API

Conekta sdk

API version: 2.2.0
Contact: engineering@conekta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conekta

import (
	"encoding/json"
	"fmt"
)

// checks if the CompanyDocumentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyDocumentRequest{}

// CompanyDocumentRequest Request body for uploading a company document.
type CompanyDocumentRequest struct {
	// Classification of the document.  | Tipo de archivo              | Descripción                                               | | :--------------------------- | :-------------------------------------------------------- | | `id_legal_representative`      | identificación oficial frente                             | | `id_legal_representative_back` | identificación oficial atrás                              | | `cfdi`                         | Prueba de situación fiscal                                | | `constitutive_act_basic`       | Acta constitutiva                                         | | `proof_of_address`             | Comprobante de domicilio del negocio                      | | `power_of_attonery`            | Poderes de representación                                 | | `deposit_account_cover`        | Carátula de la cuenta de depósito                         | | `permit_casino`                | Permiso ante SEGOB                                        | | `license_sanitation`           | Licencia sanitaria de COFEPRIS                            | | `registration_tourism`         | Inscripción ante el Registro Nacional de Turismo (SECTUR) | 
	FileClassification string `json:"file_classification"`
	// MIME type of the file. Allowed values depend on the `file_classification`. - `image/jpeg` - `image/png` - `application/pdf` 
	ContentType string `json:"content_type"`
	// Indicates if the document is international. Defaults to false.
	International *bool `json:"international,omitempty"`
	// Name of the file being uploaded.
	FileName string `json:"file_name"`
	// Base64 encoded content of the file.
	FileData string `json:"file_data"`
	AdditionalProperties map[string]interface{}
}

type _CompanyDocumentRequest CompanyDocumentRequest

// NewCompanyDocumentRequest instantiates a new CompanyDocumentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyDocumentRequest(fileClassification string, contentType string, fileName string, fileData string) *CompanyDocumentRequest {
	this := CompanyDocumentRequest{}
	this.FileClassification = fileClassification
	this.ContentType = contentType
	this.FileName = fileName
	this.FileData = fileData
	return &this
}

// NewCompanyDocumentRequestWithDefaults instantiates a new CompanyDocumentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyDocumentRequestWithDefaults() *CompanyDocumentRequest {
	this := CompanyDocumentRequest{}
	return &this
}

// GetFileClassification returns the FileClassification field value
func (o *CompanyDocumentRequest) GetFileClassification() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileClassification
}

// GetFileClassificationOk returns a tuple with the FileClassification field value
// and a boolean to check if the value has been set.
func (o *CompanyDocumentRequest) GetFileClassificationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileClassification, true
}

// SetFileClassification sets field value
func (o *CompanyDocumentRequest) SetFileClassification(v string) {
	o.FileClassification = v
}

// GetContentType returns the ContentType field value
func (o *CompanyDocumentRequest) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *CompanyDocumentRequest) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *CompanyDocumentRequest) SetContentType(v string) {
	o.ContentType = v
}

// GetInternational returns the International field value if set, zero value otherwise.
func (o *CompanyDocumentRequest) GetInternational() bool {
	if o == nil || IsNil(o.International) {
		var ret bool
		return ret
	}
	return *o.International
}

// GetInternationalOk returns a tuple with the International field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyDocumentRequest) GetInternationalOk() (*bool, bool) {
	if o == nil || IsNil(o.International) {
		return nil, false
	}
	return o.International, true
}

// HasInternational returns a boolean if a field has been set.
func (o *CompanyDocumentRequest) HasInternational() bool {
	if o != nil && !IsNil(o.International) {
		return true
	}

	return false
}

// SetInternational gets a reference to the given bool and assigns it to the International field.
func (o *CompanyDocumentRequest) SetInternational(v bool) {
	o.International = &v
}

// GetFileName returns the FileName field value
func (o *CompanyDocumentRequest) GetFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value
// and a boolean to check if the value has been set.
func (o *CompanyDocumentRequest) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileName, true
}

// SetFileName sets field value
func (o *CompanyDocumentRequest) SetFileName(v string) {
	o.FileName = v
}

// GetFileData returns the FileData field value
func (o *CompanyDocumentRequest) GetFileData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileData
}

// GetFileDataOk returns a tuple with the FileData field value
// and a boolean to check if the value has been set.
func (o *CompanyDocumentRequest) GetFileDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileData, true
}

// SetFileData sets field value
func (o *CompanyDocumentRequest) SetFileData(v string) {
	o.FileData = v
}

func (o CompanyDocumentRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyDocumentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["file_classification"] = o.FileClassification
	toSerialize["content_type"] = o.ContentType
	if !IsNil(o.International) {
		toSerialize["international"] = o.International
	}
	toSerialize["file_name"] = o.FileName
	toSerialize["file_data"] = o.FileData

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompanyDocumentRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"file_classification",
		"content_type",
		"file_name",
		"file_data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanyDocumentRequest := _CompanyDocumentRequest{}

	err = json.Unmarshal(data, &varCompanyDocumentRequest)

	if err != nil {
		return err
	}

	*o = CompanyDocumentRequest(varCompanyDocumentRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "file_classification")
		delete(additionalProperties, "content_type")
		delete(additionalProperties, "international")
		delete(additionalProperties, "file_name")
		delete(additionalProperties, "file_data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCompanyDocumentRequest struct {
	value *CompanyDocumentRequest
	isSet bool
}

func (v NullableCompanyDocumentRequest) Get() *CompanyDocumentRequest {
	return v.value
}

func (v *NullableCompanyDocumentRequest) Set(val *CompanyDocumentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyDocumentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyDocumentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyDocumentRequest(val *CompanyDocumentRequest) *NullableCompanyDocumentRequest {
	return &NullableCompanyDocumentRequest{value: val, isSet: true}
}

func (v NullableCompanyDocumentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyDocumentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


