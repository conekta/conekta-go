/*
Conekta API

Conekta sdk

API version: 2.2.0
Contact: engineering@conekta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conekta

import (
	"encoding/json"
)

// checks if the UpdatePaymentMethods type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePaymentMethods{}

// UpdatePaymentMethods struct for UpdatePaymentMethods
type UpdatePaymentMethods struct {
	// The name of the payment method holder
	Name *string `json:"name,omitempty"`
	// The expiration date of the payment method in Unix timestamp format
	ExpiresAt *int64 `json:"expires_at,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdatePaymentMethods UpdatePaymentMethods

// NewUpdatePaymentMethods instantiates a new UpdatePaymentMethods object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePaymentMethods() *UpdatePaymentMethods {
	this := UpdatePaymentMethods{}
	return &this
}

// NewUpdatePaymentMethodsWithDefaults instantiates a new UpdatePaymentMethods object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePaymentMethodsWithDefaults() *UpdatePaymentMethods {
	this := UpdatePaymentMethods{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdatePaymentMethods) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePaymentMethods) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdatePaymentMethods) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdatePaymentMethods) SetName(v string) {
	o.Name = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *UpdatePaymentMethods) GetExpiresAt() int64 {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret int64
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePaymentMethods) GetExpiresAtOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *UpdatePaymentMethods) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given int64 and assigns it to the ExpiresAt field.
func (o *UpdatePaymentMethods) SetExpiresAt(v int64) {
	o.ExpiresAt = &v
}

func (o UpdatePaymentMethods) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePaymentMethods) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdatePaymentMethods) UnmarshalJSON(data []byte) (err error) {
	varUpdatePaymentMethods := _UpdatePaymentMethods{}

	err = json.Unmarshal(data, &varUpdatePaymentMethods)

	if err != nil {
		return err
	}

	*o = UpdatePaymentMethods(varUpdatePaymentMethods)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "expires_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdatePaymentMethods struct {
	value *UpdatePaymentMethods
	isSet bool
}

func (v NullableUpdatePaymentMethods) Get() *UpdatePaymentMethods {
	return v.value
}

func (v *NullableUpdatePaymentMethods) Set(val *UpdatePaymentMethods) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePaymentMethods) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePaymentMethods) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePaymentMethods(val *UpdatePaymentMethods) *NullableUpdatePaymentMethods {
	return &NullableUpdatePaymentMethods{value: val, isSet: true}
}

func (v NullableUpdatePaymentMethods) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePaymentMethods) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


