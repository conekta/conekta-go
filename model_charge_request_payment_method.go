/*
Conekta API

Conekta sdk

API version: 2.1.0
Contact: engineering@conekta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conekta

import (
	"encoding/json"
	"fmt"
)

// ChargeRequestPaymentMethod - struct for ChargeRequestPaymentMethod
type ChargeRequestPaymentMethod struct {
	PaymentMethodCardRequest *PaymentMethodCardRequest
	PaymentMethodGeneralRequest *PaymentMethodGeneralRequest
}

// PaymentMethodCardRequestAsChargeRequestPaymentMethod is a convenience function that returns PaymentMethodCardRequest wrapped in ChargeRequestPaymentMethod
func PaymentMethodCardRequestAsChargeRequestPaymentMethod(v *PaymentMethodCardRequest) ChargeRequestPaymentMethod {
	return ChargeRequestPaymentMethod{
		PaymentMethodCardRequest: v,
	}
}

// PaymentMethodGeneralRequestAsChargeRequestPaymentMethod is a convenience function that returns PaymentMethodGeneralRequest wrapped in ChargeRequestPaymentMethod
func PaymentMethodGeneralRequestAsChargeRequestPaymentMethod(v *PaymentMethodGeneralRequest) ChargeRequestPaymentMethod {
	return ChargeRequestPaymentMethod{
		PaymentMethodGeneralRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ChargeRequestPaymentMethod) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PaymentMethodCardRequest
	err = json.Unmarshal(data, &dst.PaymentMethodCardRequest)
	if err == nil {
		jsonPaymentMethodCardRequest, _ := json.Marshal(dst.PaymentMethodCardRequest)
		if string(jsonPaymentMethodCardRequest) == "{}" { // empty struct
			dst.PaymentMethodCardRequest = nil
		} else {
			match++
		}
	} else {
		dst.PaymentMethodCardRequest = nil
	}

	// try to unmarshal data into PaymentMethodGeneralRequest
	err = json.Unmarshal(data, &dst.PaymentMethodGeneralRequest)
	if err == nil {
		jsonPaymentMethodGeneralRequest, _ := json.Marshal(dst.PaymentMethodGeneralRequest)
		if string(jsonPaymentMethodGeneralRequest) == "{}" { // empty struct
			dst.PaymentMethodGeneralRequest = nil
		} else {
			match++
		}
	} else {
		dst.PaymentMethodGeneralRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PaymentMethodCardRequest = nil
		dst.PaymentMethodGeneralRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ChargeRequestPaymentMethod)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ChargeRequestPaymentMethod)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ChargeRequestPaymentMethod) MarshalJSON() ([]byte, error) {
	if src.PaymentMethodCardRequest != nil {
		return json.Marshal(&src.PaymentMethodCardRequest)
	}

	if src.PaymentMethodGeneralRequest != nil {
		return json.Marshal(&src.PaymentMethodGeneralRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ChargeRequestPaymentMethod) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PaymentMethodCardRequest != nil {
		return obj.PaymentMethodCardRequest
	}

	if obj.PaymentMethodGeneralRequest != nil {
		return obj.PaymentMethodGeneralRequest
	}

	// all schemas are nil
	return nil
}

type NullableChargeRequestPaymentMethod struct {
	value *ChargeRequestPaymentMethod
	isSet bool
}

func (v NullableChargeRequestPaymentMethod) Get() *ChargeRequestPaymentMethod {
	return v.value
}

func (v *NullableChargeRequestPaymentMethod) Set(val *ChargeRequestPaymentMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableChargeRequestPaymentMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableChargeRequestPaymentMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargeRequestPaymentMethod(val *ChargeRequestPaymentMethod) *NullableChargeRequestPaymentMethod {
	return &NullableChargeRequestPaymentMethod{value: val, isSet: true}
}

func (v NullableChargeRequestPaymentMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargeRequestPaymentMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


