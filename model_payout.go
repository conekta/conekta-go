/*
Conekta API

Conekta sdk

API version: 2.1.0
Contact: engineering@conekta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conekta

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Payout type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Payout{}

// Payout The payout information of the payout order.
type Payout struct {
	PayoutMethod PayoutMethod `json:"payout_method"`
}

type _Payout Payout

// NewPayout instantiates a new Payout object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayout(payoutMethod PayoutMethod) *Payout {
	this := Payout{}
	this.PayoutMethod = payoutMethod
	return &this
}

// NewPayoutWithDefaults instantiates a new Payout object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayoutWithDefaults() *Payout {
	this := Payout{}
	return &this
}

// GetPayoutMethod returns the PayoutMethod field value
func (o *Payout) GetPayoutMethod() PayoutMethod {
	if o == nil {
		var ret PayoutMethod
		return ret
	}

	return o.PayoutMethod
}

// GetPayoutMethodOk returns a tuple with the PayoutMethod field value
// and a boolean to check if the value has been set.
func (o *Payout) GetPayoutMethodOk() (*PayoutMethod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayoutMethod, true
}

// SetPayoutMethod sets field value
func (o *Payout) SetPayoutMethod(v PayoutMethod) {
	o.PayoutMethod = v
}

func (o Payout) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Payout) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["payout_method"] = o.PayoutMethod
	return toSerialize, nil
}

func (o *Payout) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"payout_method",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPayout := _Payout{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPayout)

	if err != nil {
		return err
	}

	*o = Payout(varPayout)

	return err
}

type NullablePayout struct {
	value *Payout
	isSet bool
}

func (v NullablePayout) Get() *Payout {
	return v.value
}

func (v *NullablePayout) Set(val *Payout) {
	v.value = val
	v.isSet = true
}

func (v NullablePayout) IsSet() bool {
	return v.isSet
}

func (v *NullablePayout) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayout(val *Payout) *NullablePayout {
	return &NullablePayout{value: val, isSet: true}
}

func (v NullablePayout) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayout) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


