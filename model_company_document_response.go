/*
Conekta API

Conekta sdk

API version: 2.2.0
Contact: engineering@conekta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conekta

import (
	"encoding/json"
	"fmt"
)

// checks if the CompanyDocumentResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyDocumentResponse{}

// CompanyDocumentResponse Response body after uploading a company document.
type CompanyDocumentResponse struct {
	// Classification of the document.  | Tipo de archivo              | Descripción                                               | | :--------------------------- | :-------------------------------------------------------- | | `id_legal_representative`      | identificación oficial frente                             | | `id_legal_representative_back` | identificación oficial atrás                              | | `cfdi`                         | Prueba de situación fiscal                                | | `constitutive_act_basic`       | Acta constitutiva                                         | | `proof_of_address`             | Comprobante de domicilio del negocio                      | | `power_of_attonery`            | Poderes de representación                                 | | `deposit_account_cover`        | Carátula de la cuenta de depósito                         | | `permit_casino`                | Permiso ante SEGOB                                        | | `license_sanitation`           | Licencia sanitaria de COFEPRIS                            | | `registration_tourism`         | Inscripción ante el Registro Nacional de Turismo (SECTUR) | 
	FileClassification string `json:"file_classification"`
	// Name of the file as stored or processed.
	FileName string `json:"file_name"`
	// Current status of the document.
	Status string `json:"status"`
	AdditionalProperties map[string]interface{}
}

type _CompanyDocumentResponse CompanyDocumentResponse

// NewCompanyDocumentResponse instantiates a new CompanyDocumentResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyDocumentResponse(fileClassification string, fileName string, status string) *CompanyDocumentResponse {
	this := CompanyDocumentResponse{}
	this.FileClassification = fileClassification
	this.FileName = fileName
	this.Status = status
	return &this
}

// NewCompanyDocumentResponseWithDefaults instantiates a new CompanyDocumentResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyDocumentResponseWithDefaults() *CompanyDocumentResponse {
	this := CompanyDocumentResponse{}
	return &this
}

// GetFileClassification returns the FileClassification field value
func (o *CompanyDocumentResponse) GetFileClassification() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileClassification
}

// GetFileClassificationOk returns a tuple with the FileClassification field value
// and a boolean to check if the value has been set.
func (o *CompanyDocumentResponse) GetFileClassificationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileClassification, true
}

// SetFileClassification sets field value
func (o *CompanyDocumentResponse) SetFileClassification(v string) {
	o.FileClassification = v
}

// GetFileName returns the FileName field value
func (o *CompanyDocumentResponse) GetFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value
// and a boolean to check if the value has been set.
func (o *CompanyDocumentResponse) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileName, true
}

// SetFileName sets field value
func (o *CompanyDocumentResponse) SetFileName(v string) {
	o.FileName = v
}

// GetStatus returns the Status field value
func (o *CompanyDocumentResponse) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CompanyDocumentResponse) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CompanyDocumentResponse) SetStatus(v string) {
	o.Status = v
}

func (o CompanyDocumentResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyDocumentResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["file_classification"] = o.FileClassification
	toSerialize["file_name"] = o.FileName
	toSerialize["status"] = o.Status

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompanyDocumentResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"file_classification",
		"file_name",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanyDocumentResponse := _CompanyDocumentResponse{}

	err = json.Unmarshal(data, &varCompanyDocumentResponse)

	if err != nil {
		return err
	}

	*o = CompanyDocumentResponse(varCompanyDocumentResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "file_classification")
		delete(additionalProperties, "file_name")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCompanyDocumentResponse struct {
	value *CompanyDocumentResponse
	isSet bool
}

func (v NullableCompanyDocumentResponse) Get() *CompanyDocumentResponse {
	return v.value
}

func (v *NullableCompanyDocumentResponse) Set(val *CompanyDocumentResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyDocumentResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyDocumentResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyDocumentResponse(val *CompanyDocumentResponse) *NullableCompanyDocumentResponse {
	return &NullableCompanyDocumentResponse{value: val, isSet: true}
}

func (v NullableCompanyDocumentResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyDocumentResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


